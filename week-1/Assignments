// ASSIGNMENT


// Q: Write code that prints :-
//  (Asyncronous)
// 1. logs "hii" after 1 second
// 2. logs "hello" 3 seconds after step 1
// 3. logs "hello there" 5 seconds after step 2
//   (Syncronous)
// 4. log "outside the callback hell" at last


// Solution - 1
// setTimeout(function() {                    // Asynchronous
//     console.log("hii")
//     setTimeout(function() {
//         console.log("hello")
//     }, 3000);
//     setTimeout(function() {
//         console.log("hello there")
//     }, 5000);
// }, 1000);

// console.log("outside the callback hell")   // Synchronous


// // Solution - 2
// function step3Done() {
//     console.log("hello there");
// }
// function step2Done() {
//     console.log("hello");
//     setTimeout(step3Done, 5000);
// }
// function step1Done() {
//     console.log("hii")
//     setTimeout(step2Done, 3000);
// }

// setTimeout(step1Done, 1000);






// // Now using promises to write the same solution

// function setTimeoutPromisified(duration) {
//     return new Promise(function(resolve) {
//         setTimeout(resolve, duration);
//     });
// }


// // Promise chaining   (Method - 1)
// setTimeoutPromisified(1000).then(function() {
//     console.log("hii");
//     setTimeoutPromisified(3000).then(function() {
//         console.log("hello");
//         setTimeoutPromisified(5000).then(function() {
//             console.log("hii there");
//         });
//     });
// });

// console.log("outside the callback hell");


// // Promise chaining   (Method - 2)

// function setTimeoutPromisified(duration) {
//     return new Promise(function (resolve) {
//         setTimeout(resolve, duration);
//     });
// }

// setTimeoutPromisified(1000).then(function() {
//     console.log("hii");
//     return setTimeoutPromisified(3000)
// }).then(function() {
//     console.log("hello");
//     return setTimeoutPromisified(5000)
// }).then(function() {
//     console.log("hii there");
// })

// console.log("outside the callback hell");






// // USING ASYNC AWAIT SYNTAX for writing the same assignment

// // The async and await syntax in js provides a way to write asynchronous that looks and behaves like synchronous code, making it easier to read and maintain.

// function setTimeoutPromisified(ms) {
//     return new Promise(resolve => setTimeout(resolve, ms));
// }

// async function solve() {
//     await setTimeoutPromisified(1000);
//     console.log("hii");
//     await setTimeoutPromisified(3000);
//     console.log("hello");
//     await setTimeoutPromisified(5000);
//     console.log("hi there");
// }

// solve();

// console.log("outside the callback hell");
