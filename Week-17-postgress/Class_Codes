// Connect to postgress

import { Client } from "pg";

const pgClient = new Client("")

async function main() {
    await pgClient.connect();
    const response = await(pgClient.query("UPDATE users SET username='adityadevdotcom' WHERE id=4"))
    console.log(response.rows);
}

main();





// Updating the values in database using express

import express from "express";
import { Client } from "pg";

const app = express();
app.use(express.json());

const pgClient = new Client("")

pgClient.connect();

app.post("/signup", async (req, res) => {
    const username = req.body.username;
    const password = req.body.password;
    const email = req.body.email;

    try {
        const insertQuery = `INSERT INFO todo (username, email, password) VALUES {$1, $2, $3};`
        
        const response = await pgClient.query(insertQuery, [username, email, password]);

        res.json({
            message: "You are signed up"
        })
    } catch (e) {
        message : "Error while signing up"
    }
})

app.listen(3000);





// Adding address to users table and also adding the userId

import express from "express";
import { Client } from "pg";

const app = express();
app.use(express.json());

const pgClient = new Client("")

pgClient.connect();

app.post("/signup", async (req, res) => {
    const username = req.body.username;
    const password = req.body.password;
    const email = req.body.email;

    const city = req.body.city;
    const country = req.body.country;
    const street = req.body.street;
    const pincode = req.body.pincode;

    try {
        const insertQuery = `INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING id;`
        const response = await pgClient.query(insertQuery, [username, email, password]);
        const userId = response.rows[0].id;

        const addressInsertQuery = `INSERT INTO address (city, country, street, pincode, user_id) VALUES ($1, $2, $3, $4, $5)`;
        const addressInsertResponse = await pgClient.query(addressInsertQuery, [city, country, street, pincode, userId])

        res.json({
            message: "You are signed up"
        })
    } catch (e) {
        console.log(e);
        res.json({
            message: "Error while signing up"
        })
    }
})

app.listen(3000);




// Creating a postgressSQL transaction using BEGIN AND COMMIT.

import express from "express";
import { Client } from "pg";

const app = express();
app.use(express.json());

const pgClient = new Client("")

pgClient.connect();

app.post("/signup", async (req, res) => {
    const username = req.body.username;
    const password = req.body.password;
    const email = req.body.email;

    const city = req.body.city;
    const country = req.body.country;
    const street = req.body.street;
    const pincode = req.body.pincode;

    try {
        const insertQuery = `INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING id;`
        const addressInsertQuery = `INSERT INTO address (city, country, street, pincode, user_id) VALUES ($1, $2, $3, $4, $5)`;

        
        await pgClient.query("BEGIN;")

        const response = await pgClient.query(insertQuery, [username, email, password]);
        const userId = response.rows[0].id;
        const addressInsertResponse = await pgClient.query(addressInsertQuery, [city, country, street, pincode, userId])

        await pgClient.query("COMMIT;")

        res.json({
            message: "You are signed up"
        })
    } catch (e) {
        console.log(e);
        res.json({
            message: "Error while signing up"
        })
    }
})

app.listen(3000);




// Creating a timeout Promise and why we need to wrap the code in BEGIN and COMMIT

import express from "express";
import { Client } from "pg";

const app = express();
app.use(express.json());

const pgClient = new Client("")

pgClient.connect();

app.post("/signup", async (req, res) => {
    const username = req.body.username;
    const password = req.body.password;
    const email = req.body.email;

    const city = req.body.city;
    const country = req.body.country;
    const street = req.body.street;
    const pincode = req.body.pincode;

    try {
        const insertQuery = `INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING id;`
        const addressInsertQuery = `INSERT INTO address (city, country, street, pincode, user_id) VALUES ($1, $2, $3, $4, $5)`;

        
        await pgClient.query("BEGIN;")

        const response = await pgClient.query(insertQuery, [username, email, password]);
        const userId = response.rows[0].id;
        await new Promise(x => setTimeout(x, 100 * 1000)) // Stop the control on this for 100 seconds.
                                                          // Also if the backend crashed for any reason before the timeout their will be 
                                                          // not partial entry in the database. But if we don't wrap the code in the BEGIN AND 
                                                          // COMMIT even though the backend crashed, the entry will we updated in the database
        const addressInsertResponse = await pgClient.query(addressInsertQuery, [city, country, street, pincode, userId])

        await pgClient.query("COMMIT;")

        res.json({
            message: "You are signed up"
        })
    } catch (e) {
        console.log(e);
        res.json({
            message: "Error while signing up"
        })
    }
})

app.listen(3000);




// Creating and returing metadata

import express from "express";
import { Client } from "pg";

const app = express();
app.use(express.json());

const pgClient = new Client("")

pgClient.connect();

app.post("/signup", async (req, res) => {
    const username = req.body.username;
    const password = req.body.password;
    const email = req.body.email;

    const city = req.body.city;
    const country = req.body.country;
    const street = req.body.street;
    const pincode = req.body.pincode;

    try {
        const insertQuery = `INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING id;`
        const addressInsertQuery = `INSERT INTO address (city, country, street, pincode, user_id) VALUES ($1, $2, $3, $4, $5)`;

        
        await pgClient.query("BEGIN;")

        const response = await pgClient.query(insertQuery, [username, email, password]);
        const userId = response.rows[0].id;
        await new Promise(x => setTimeout(x, 100 * 1000)) // Stop the control on this for 100 seconds.
                                                          // Also if the backend crashed for any reason before the timeout their will be 
                                                          // not partial entry in the database. But if we don't wrap the code in the BEGIN AND 
                                                          // COMMIT even though the backend crashed, the entry will we updated in the database
        const addressInsertResponse = await pgClient.query(addressInsertQuery, [city, country, street, pincode, userId])

        await pgClient.query("COMMIT;")

        res.json({
            message: "You are signed up"
        })
    } catch (e) {
        console.log(e);
        res.json({
            message: "Error while signing up"
        })
    }
})

app.get("/metadata", async (req, res) => {
    const id = req.query.id;

    const query1 = `SELECT username, email, password FROM users WHERE id=$1`;
    const response1 = await pgClient.query(query1, [id]);

    const query2 = `SELECT * FROM address WHERE user_id=$1`;
    const response2 = await pgClient.query(query2, [id]);

    res.json({
        user: response1.rows[0],
        address: response2.rows
    })
})

app.listen(3000);
